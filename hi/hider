#!/usr/bin/env python3

from os import fsync, path
from time import monotonic


def get_len(fpath):
    """
    """
    try:
        with open(fpath, "rb") as f:
            try:
                f.seek(0, 2)
            except Exception as e:
                print(e)
                return -1
            try:
                position = f.tell()
            except Exception as e:
                print(e)
                return -1
            return position
    except Exception as e:
        print(e)
        return -1


def get_mode():
    """
    """
    while True:
        print('Select mode:')
        mode = input(
            '1 - insertion (insert file in other file)\n2 - extraction '
            '(extract file from other file)\n: ')
        if mode in ('1', '2'):
            break
        print('E: invalid mode')
        continue

    if mode == '1':
        print('I: mode: insertion')
    else:
        print('I: mode: extraction')
    return mode


mode = get_mode()


while True:
    if mode == '1':
        i_file = input('Input file (file to hide): ')
    else:
        i_file = input('Input file (container): ')

    if i_file == '':
        print('E: input file is not set')
        continue

    i_file = path.realpath(i_file)

    if not path.exists(i_file):
        print('E: {} does not exist'.format(i_file))
        continue

    print('I: input file real path:', [i_file])

    i_size = get_len(i_file)

    if i_size == 0:
        print('E: input file has zero size, nothing to hide!')
        continue
    if i_size == -1:
        continue

    print('I: input file size:', i_size)

    try:
        i_object = open(i_file, 'rb')
        break
    except Exception as e:
        print('E: {}'.format(e))


if mode == '1':
    while True:
        o_file = input('Output file (container): ')

        if o_file == '':
            print('E: output file is not set')
            continue

        o_size = get_len(o_file)
        if o_size == -1:
            continue

        o_file = path.realpath(o_file)

        if not path.exists(o_file):
            print('E: {} does not exist'.format(i_file))
            continue

        print('I: output file real path:', [o_file])

        if o_file == i_file:
            print('E: input and output files should not be at the same path!')
            continue

        print('I: output file size:', o_size)

        if o_size < i_size:
            print('E: output file must be not smaller than input file')
            continue

        try:
            o_object = open(o_file, 'rb+')
            break
        except Exception as e:
            print(e)
            continue
else:
    while True:
        o_file = input('Output file: ')

        if o_file == '':
            print('E: output file is not set')
            continue

        o_file = path.realpath(o_file)

        print('I: output file real path:', [o_file])

        if path.exists(o_file):
            print('E: {} already exists'.format([o_file]))
            continue

        try:
            o_object = open(o_file, 'wb')
            break
        except Exception as e:
            print(e)
            continue


if mode == '1':
    max_init_pos = o_size - i_size
else:
    max_init_pos = i_size - 1

while True:
    init_pos = input(
        'Initial position\n(valid values are [0; {}], default=0): '.format(
            max_init_pos))
    if init_pos == '':
        init_pos = 0

    try:
        init_pos = int(init_pos)
    except Exception:
        print('E: invalid value')
        continue

    print('I: initial position:', init_pos)

    if init_pos > max_init_pos or init_pos < 0:
        print('E: invalid initial position')
        continue

    break


if mode == '2':
    while True:
        max_data_size = i_size - init_pos
        data_size = input(
            'Data size to extract\n(valid values are [1; {}], '
            'default={}): '.format(
                max_data_size, max_data_size))

        if data_size == '':
            data_size = max_data_size

        try:
            data_size = int(data_size)
            print('I: data size to extract:', data_size)
        except Exception:
            print('E: invalid value')
            continue

        if data_size > max_data_size or data_size < 1:
            print('E: invalid data size')
            continue

        break

print('I: reading, writing, fsyncing...')

M = 1024**2
chunk_size = M * 32


if mode == '1':
    data_size = i_size


chunks_num = data_size // chunk_size
ost_size = data_size % chunk_size

if mode == '1':
    o_object.seek(init_pos)
else:
    i_object.seek(init_pos)


t0 = monotonic()
t00 = t0
summa = 0
print()
print('\033Mwritten {}, {} MiB, {}%  '.format(
    summa,
    round(summa / M, 1),
    round(summa / data_size * 100, 1)
))


if chunks_num > 0:
    for i in range(chunks_num):
        i_data = i_object.read(chunk_size)
        o_object.write(i_data)
        fsync(o_object.fileno())
        summa += chunk_size
        t1 = monotonic()
        if t1 - t0 > 2:
            t0 = monotonic()
            print('\033MI: written: {}, {} MiB, {}% in {}s, avg {} '
                  'MiB/s'.format(
                      summa,
                      round(summa / M, 1),
                      round(summa / data_size * 100, 1),
                      round(monotonic() - t00, 1),
                      round(summa / M / (monotonic() - t00), 1)))
if ost_size > 0:
    i_data = i_object.read(ost_size)
    o_object.write(i_data)
    fsync(o_object.fileno())
    summa += ost_size
    print('\033MI: written: {}, {} MiB, {}% in {}s, avg {} MiB/s'.format(
        summa,
        round(summa / M, 1),
        round(summa / data_size * 100, 1),
        round(monotonic() - t00, 1),
        round(summa / M / (monotonic() - t00), 1)))


if mode == '1':
    print('Remember this to extract the data from the container:')
    print(
        'Initial position {}, Data size {}, Final position {}'.format(
            init_pos,
            i_size,
            o_object.tell()))
else:
    print('File extracted successfully!')

print('OK')
