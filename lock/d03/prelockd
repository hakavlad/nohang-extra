#!/usr/bin/env python3
"""prelockd"""

import os
import mmap
from re import search
from sre_constants import error as invalid_re
from time import sleep, monotonic, process_time
from sys import stdout, stderr, exit, argv
from signal import signal, SIGTERM, SIGINT, SIGQUIT, SIGHUP
from ctypes import CDLL


def valid_re(reg_exp):
    """
    Validate regular expression.
    """
    try:
        search(reg_exp, '')
    except invalid_re:
        errprint('Invalid config: invalid regexp: {}'.format(reg_exp))
        exit(1)


def errprint(*text):
    """
    """
    print(*text, file=stderr, flush=True)


def string_to_float_convert_test(string):
    """
    Try to interprete string values as floats.
    """
    try:
        return float(string)
    except ValueError:
        return None


def mlockall():
    """
    Lock process memory.
    """
    MCL_FUTURE = 2

    libc = CDLL('libc.so.6', use_errno=True)

    result = libc.mlockall(MCL_FUTURE)

    if result != 0:
        errprint('ERROR: cannot lock process memory: [Errno {}]'.format(
            result))
        errprint('Exit.')
        exit(1)
    else:
        if debug:
            print('process memory locked with MCL_FUTURE')


def signal_handler(signum, frame):
    """
    Handle signals: close fd and exit.
    """
    if len(lock_dict) > 0:
        for i in lock_dict:
            lock_dict[i][1].close()  # close mm
            lock_dict[i][0].close()  # close fd
    print('Got signal {}, exit.'.format(signum))
    exit()


def get_current_set():
    """
    """
    m0 = monotonic()
    p0 = process_time()

    if debug:
        print('Looking for mapped files...')

    new_map_set = set()
    for pid in os.listdir('/proc'):
        if pid[0].isdecimal() is False:
            continue
        map_dir = '/proc/' + pid + '/map_files/'
        try:
            try:
                f_list = os.listdir(map_dir)
            except PermissionError as e:
                errprint(e)
                exit(1)
            for f_name in f_list:
                f_realpath = os.path.realpath(map_dir + f_name)
                new_map_set.add(f_realpath)
        except FileNotFoundError as e:
            errprint(e)
            continue

    current_map_set = set()
    for path in new_map_set:
        if os.path.exists(path):
            current_map_set.add(path)
        else:
            if debug:
                print('skip:', path)

    if debug:
        list_d = list(current_map_set)
        list_d.sort()
        for path in list_d:
            print('mapped:', path)

    m1 = monotonic()
    p1 = process_time()

    if debug:
        print('Found {} mapped files in {}s (process time: {}s)'.format(len(
            current_map_set), round(m1 - m0, 3), round(p1 - p0, 3)))

    return current_map_set


def lock_files(_map_set):
    """
    """
    if debug:
        print('mapping ang locking files...')

    lock_counter = 0
    mm_read_size_counter = 0

    di = dict()

    for rp in _map_set:
        rp = str(rp)
        if search(r, rp) is not None:
            try:
                s = os.path.getsize(rp)
                if s > 0:
                    di[rp] = s
            except FileNotFoundError as e:
                if debug:
                    print(e)
        else:
            if debug:
                print("skip (doesn't match $LOCK_RE): " + rp)
    list_d = list(di.items())
    list_d.sort(key=lambda i: i[1])

    for f_realpath, _ in list_d:

        try:
            size = os.path.getsize(f_realpath)
        except FileNotFoundError as e:
            errprint(e)
            continue

        if size > MAX_SIZE:
            if debug:
                print('skip (file size {}M > $MAX_FILE_SIZE) {}'.format(round(
                    size / MIB, 1), f_realpath))
                continue
            else:
                break

        try:
            rss = get_self_rss()
        except OSError as e:
            errprint(e)
            break

        if rss + size > max_self_rss:
            if debug:
                print('skip (rss ({}M) + size ({}M) > max_self_rss) {}'.format(
                    round(rss / MIB, 1), round(size / MIB, 1), f_realpath))
                continue
            else:
                break

        try:
            if debug:
                print('locking ({}M) {}'.format(
                    round(size / MIB, 1), f_realpath))
            f = open(f_realpath, 'rb')
            mm = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
            lock_dict[f_realpath] = (f, mm)
            lock_counter += 1
            mm_read_size_counter += size
        except OSError as e:
            errprint(e)
            break

    print('locked {}M files'.format(round(mm_read_size_counter / MIB, 1)))


def write_snapshot():
    """
    """
    map_set = get_current_set()
    map_list = sorted(list(map_set))
    print('Saving mapped files...')
    try:
        with open(saved_path, 'w') as f:
            for line in map_list:
                f.write(line + '\n')
    except FileNotFoundError:
        os.mkdir(saved_dir)
        os.chmod(saved_dir, mode=0o700)
        with open(saved_path, 'w') as f:
            for line in map_list:
                f.write(line + '\n')
    print('OK, mmapped files list has been saved in ' + saved_path)


def get_saved_set():
    """
    """
    if debug:
        print('Looking for saved files...')

    saved_set = set()

    try:
        with open(saved_path) as f:
            for line in f:
                saved_set.add(line[:-1])
    except FileNotFoundError as e:
        errprint(e)

    new_saved_set = set()

    for path in saved_set:
        if os.path.exists(path):
            new_saved_set.add(path)
        else:
            if debug:
                print('skip:', path)
    if debug:
        list_d = list(new_saved_set)
        list_d.sort()
        for path in list_d:
            print('saved:', path)
        print('Found {} saved paths'.format(len(new_saved_set)))

    return new_saved_set


def get_self_rss():
    """
    """
    with open('/proc/self/statm') as f:
        return int(f.readline().split(' ')[1]) * SC_PAGESIZE


###############################################################################

MIB = 1024 * 1024

min_mem_available = 20 * 1024

saved_dir = '/var/lib/prelockd'
saved_path = '/var/lib/prelockd/saved_snapshot'
debug = True


a = argv[1:]
la = len(a)
if la == 0:
    errprint('invalid input: missing CLI options')
    exit(1)
elif la == 1:
    if a[0] == '-p':
        get_current_set()
        exit()
    elif a[0] == '-w':
        write_snapshot()
        exit()
    else:
        errprint('invalid input')
        exit(1)
elif la == 2:
    if a[0] == '-c':
        config = a[1]
    else:
        errprint('invalid input')
        exit(1)
else:
    errprint('invalid input: too many options')
    exit(1)


with open('/proc/meminfo') as f:
    mem_list = f.readlines()
    mem_total = int(mem_list[0].split(':')[1][:-4])


mem_list_names = []

for s in mem_list:
    mem_list_names.append(s.split(':')[0])
try:
    mem_available_index = mem_list_names.index('MemAvailable')
except ValueError:
    errprint('Your Linux kernel is too old, Linux 3.14+ required\nExit')

SC_PAGESIZE = os.sysconf(os.sysconf_names['SC_PAGESIZE'])


config_dict = dict()

try:
    with open(config) as f:
        for line in f:
            if line[0] == '$' and '=' in line:
                key, _, value = line.partition('=')
                key = key.rstrip()
                value = value.strip()
                if key in config_dict:
                    errprint('config key {} duplication'.format(key))
                    exit(1)
                config_dict[key] = value
except (PermissionError, UnicodeDecodeError, IsADirectoryError,
        IndexError, FileNotFoundError) as e:
    errprint('Invalid config: {}. Exit.'.format(e))
    exit(1)


if '$DEBUG' in config_dict:
    debug = config_dict['$DEBUG']
    if debug == 'True':
        debug = True
    elif debug == 'False':
        debug = False
    else:
        errprint('invalid $DEBUG value')
        exit(1)
else:
    errprint('missing $DEBUG key')
    exit(1)


if '$LOCK_CURRENT_MAPPED' in config_dict:
    lock_current_mapped = config_dict['$LOCK_CURRENT_MAPPED']
    if lock_current_mapped == 'True':
        lock_current_mapped = True
    elif lock_current_mapped == 'False':
        lock_current_mapped = False
    else:
        errprint('invalid $LOCK_CURRENT_MAPPED value')
        exit(1)
else:
    errprint('missing $LOCK_CURRENT_MAPPED key')
    exit(1)


if '$LOCK_SAVED_MAPPED' in config_dict:
    lock_saved_mapped = config_dict['$LOCK_SAVED_MAPPED']
    if lock_saved_mapped == 'True':
        lock_saved_mapped = True
    elif lock_saved_mapped == 'False':
        lock_saved_mapped = False
    else:
        errprint('invalid $LOCK_SAVED_MAPPED value')
        exit(1)
else:
    errprint('missing $LOCK_SAVED_MAPPED key')
    exit(1)


if '$MAX_FILE_SIZE_MIB' in config_dict:
    string = config_dict['$MAX_FILE_SIZE_MIB']
    max_file_size_mib = string_to_float_convert_test(string)
    if max_file_size_mib is None:
        errprint('invalid $MAX_FILE_SIZE_MIB value')
        exit(1)
    max_file_size = int(max_file_size_mib * 1048576)
else:
    errprint('missing $MAX_FILE_SIZE_MIB key')
    exit(1)


if '$LOCK_RE' in config_dict:
    lock_re = config_dict['$LOCK_RE']
    valid_re(lock_re)
else:
    errprint('missing $LOCK_RE key')
    exit(1)


if '$MAX_SELF_RSS_PERCENT' in config_dict:
    string = config_dict['$MAX_SELF_RSS_PERCENT']
    max_self_rss_percent = string_to_float_convert_test(string)
    if max_self_rss_percent is None:
        errprint('invalid $MAX_SELF_RSS_PERCENT value')
        exit(1)
    max_self_rss_pc = int(mem_total * max_self_rss_percent / 100) * 1024
else:
    errprint('missing $MAX_FILE_SIZE_MIB key')
    exit(1)


if '$MAX_SELF_RSS_MIB' in config_dict:
    string = config_dict['$MAX_SELF_RSS_MIB']
    max_self_rss_mib = string_to_float_convert_test(string)
    if max_self_rss_mib is None:
        errprint('invalid $MAX_SELF_RSS_MIB value')
        exit(1)
    max_self_rss_mib = int(max_self_rss_mib * 1048576)
else:
    errprint('missing $MAX_SELF_RSS_MIB key')
    exit(1)


if max_self_rss_mib <= max_self_rss_pc:
    max_self_rss = max_self_rss_mib
else:
    max_self_rss = max_self_rss_pc

config = os.path.abspath(config)

print('Starting prelockd with the config: {}'.format(config))

if debug:
    print('$MAX_SELF_RSS_PERCENT:', round(max_self_rss_pc / MIB, 1), '(MiB)')
    print('$MAX_SELF_RSS_MIB:    ', round(max_self_rss_mib / MIB, 1))
    print('max_self_rss:         ', round(max_self_rss / MIB, 1), '(MiB)')
    print('$DEBUG:               ', debug)
    print('$LOCK_CURRENT_MAPPED: ', lock_current_mapped)
    print('$LOCK_SAVED_MAPPED:   ', lock_saved_mapped)
    print('$MAX_FILE_SIZE_MIB:   ', max_file_size / MIB)
    print('$LOCK_RE:             ', lock_re)

mlockall()

r = lock_re

# max file size that can be locked
MAX_SIZE = max_file_size


###############################################################################


p0 = process_time()
m0 = monotonic()

stdout.flush()

sig_list = [SIGTERM, SIGINT, SIGQUIT, SIGHUP]

lock_dict = dict()

for i in sig_list:
    signal(i, signal_handler)


final_set = set()

if lock_current_mapped:
    current_set = get_current_set()
    final_set.update(current_set)

if lock_saved_mapped:
    saved_set = get_saved_set()
    final_set.update(saved_set)

fs = len(final_set)

if fs == 0:
    print('Nothing to do!')
    exit()

lock_files(final_set)

try:
    num_fd = len(os.listdir('/proc/self/fd'))
    print('fd opened:', num_fd)
except OSError as e:
    errprint(e)

m = monotonic() - m0
p = process_time() - p0

print('self RSS: {}M, startup time: {}s, process time: {}s'.format(
    round(get_self_rss() / MIB, 1), round(m, 1), round(p, 1)))

stdout.flush()

while True:
    sleep(9999)
