#!/usr/bin/env python3

from ctypes import CDLL
from time import sleep
from sys import argv

"""
    Execute the command
    find /sys/fs/cgroup -name memory.pressure
    to find available memory.pressue files (except /proc/pressure/memory).
    (actual for cgroup2)
"""

if len(argv) > 1:
    psi_path = argv[1]
else:
    psi_path = '/proc/pressure/memory'


def mlockall():

    MCL_CURRENT = 1
    MCL_FUTURE = 2
    MCL_ONFAULT = 4

    libc = CDLL('libc.so.6', use_errno=True)

    result = libc.mlockall(
        MCL_CURRENT | MCL_FUTURE | MCL_ONFAULT
    )
    if result != 0:
        result = libc.mlockall(
            MCL_CURRENT | MCL_FUTURE
        )
        if result != 0:
            print('WARNING: cannot lock all memory')
        else:
            pass
    else:
        pass


mlockall()


def psi_path_to_metrics(psi_path):

    with open(psi_path) as f:
        psi_list = f.readlines()
    # print(psi_list)
    some_list, full_list = psi_list[0].split(' '), psi_list[1].split(' ')
    #print(some_list, full_list)
    some_avg10 = some_list[1].split('=')[1]
    some_avg60 = some_list[2].split('=')[1]
    some_avg300 = some_list[3].split('=')[1]

    full_avg10 = full_list[1].split('=')[1]
    full_avg60 = full_list[2].split('=')[1]
    full_avg300 = full_list[3].split('=')[1]

    return (some_avg10, some_avg60, some_avg300,
            full_avg10, full_avg60, full_avg300)


print('Path to PSI file: {}\n'.format(psi_path))


print('      avg10  avg60 avg300         avg10  avg60 avg300')

while True:
    (some_avg10, some_avg60, some_avg300,
     full_avg10, full_avg60, full_avg300) = psi_path_to_metrics(psi_path)

    print('some {} {} {} | full {} {} {}'.format(
        some_avg10.rjust(6),
        some_avg60.rjust(6),
        some_avg300.rjust(6),
        full_avg10.rjust(6),
        full_avg60.rjust(6),
        full_avg300.rjust(6)))

    sleep(2)
