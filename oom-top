#!/usr/bin/env python3

# top oom_score




from time import sleep
import os
import operator

oom_score_min_value = 1
num_lines = 30
period = 1


'''
# KiB -> MiB
def human(num):
    a = str(round(num / 1024.0, 3))
    a0 = a.split('.')[0].rjust(4, ' ')
    a1 = a.split('.')[1]
    if len(a1) == 1:
        a1 += '00'
    if len(a1) == 2:
        a1 += '0'
    return '{}.{}'.format(a0, a1)
'''


def human(num):
    return str(round(num / 1024.0)).rjust(8, ' ')








with open('/proc/self/status') as file:
    status_list = file.readlines()

status_names = []
for s in status_list:
    status_names.append(s.split(':')[0])

vm_rss_index = status_names.index('VmRSS')
vm_swap_index = status_names.index('VmSwap')


while True:

    oom_list = []
    for i in os.listdir('/proc'):
        if i.isdigit() is not True:
            continue
        try:
            with open('/proc/' + i + '/oom_score') as file:
                oom_score = int(file.readlines()[0][:-1])
        except Exception:
            print('exception oom!')
        oom_list.append((i, oom_score))
    oom_list_sorted = sorted(oom_list, key=operator.itemgetter(1), reverse=True)

    print("\033c")
    print('oom_score    Pid  Name                VmRSS      VmSwap    VmRSS+Swap')
    print('---------  -----  ---------------  ----------  ----------  ----------')

    if len(oom_list_sorted) < num_lines:
        num_lines = len(oom_list_sorted) - 1

    for i in oom_list_sorted[:num_lines]:
        oom_score = i[1]
        pid = i[0]

        try:
            with open('/proc/' + pid + '/status') as file:
                status_list = file.readlines()

            vm_rss = int(status_list[vm_rss_index].split(':')[1].split(' ')[-2])
            vm_swap = int(status_list[vm_swap_index].split(':')[1].split(' ')[-2])
            vm_sum = vm_rss + vm_swap
            name = status_list[0][:-1].split('\t')[1]

        except Exception:
            vm_rss = 0
            vm_swap = 0
            vm_sum = 0
            name = status_list[0][:-1].split('\t')[1]


        if int(oom_score) >= oom_score_min_value:
            print(
                '{}{}  {} {} M  {} M  {} M'.format(
                    str(oom_score).rjust(9), 
                    str(pid).rjust(7), 
                    name.ljust(16), 
                    human(vm_rss), 
                    human(vm_swap), 
                    human(vm_sum)
                    )
                )

    sleep(period)










