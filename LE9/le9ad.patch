diff -pru a/Documentation/admin-guide/sysctl/vm.rst b/Documentation/admin-guide/sysctl/vm.rst
--- a/Documentation/admin-guide/sysctl/vm.rst	2020-12-21 21:30:08.000000000 +0900
+++ b/Documentation/admin-guide/sysctl/vm.rst	2021-02-07 03:46:09.376432672 +0900
@@ -24,6 +24,9 @@ files can be found in mm/swap.c.
 
 Currently, these files are in /proc/sys/vm:
 
+- active_file_low_kbytes
+- active_file_low_max_scan
+- active_file_min_kbytes
 - admin_reserve_kbytes
 - block_dump
 - compact_memory
@@ -77,6 +80,46 @@ Currently, these files are in /proc/sys/
 - zone_reclaim_mode
 
 
+active_file_low_kbytes
+======================
+
+Available only when CONFIG_PROTECT_ACTIVE_FILE is set. This knob controls soft
+eviction throttling of active file pages eviction under memory pressure.
+Eviction of active file pages will be throttled if their volume is below this
+value. 
+
+The severity of the throttling depends on vm.active_file_low_max_scan.
+
+If vm.active_file_low_kbytes <= vm.active_file_min_kbytes
+than vm.active_file_min_kbytes threshold will have higher priority and
+hard reservation will be applied.
+
+The default value is 0.
+
+
+active_file_low_max_scan
+========================
+
+Available only when CONFIG_PROTECT_ACTIVE_FILE is set. This knob controls the
+severity of the throttling of active file pages eviction when soft active file
+pages reservation is implied (when the volume of active file pages is below
+vm.active_file_low_kbytes). The lower the value, the stronger the trottling.
+Setting the value to zero turns a soft reservation of active file pages into a
+hard reservation.
+
+The default value is 32.
+
+
+active_file_min_kbytes
+======================
+
+Available only when CONFIG_PROTECT_ACTIVE_FILE is set. Active file pages should
+not be evicted under memory pressure if their volume is below this (even with
+no free swap space).
+
+The default value is 0.
+
+
 admin_reserve_kbytes
 ====================
 
diff -pru a/include/linux/mm.h b/include/linux/mm.h
--- a/include/linux/mm.h	2020-12-21 21:30:08.000000000 +0900
+++ b/include/linux/mm.h	2021-02-07 03:11:21.028289254 +0900
@@ -205,6 +205,12 @@ extern int sysctl_max_map_count;
 extern unsigned long sysctl_user_reserve_kbytes;
 extern unsigned long sysctl_admin_reserve_kbytes;
 
+#if defined(CONFIG_PROTECT_ACTIVE_FILE)
+extern unsigned long sysctl_active_file_min_kbytes;
+extern unsigned long sysctl_active_file_low_kbytes;
+extern unsigned long sysctl_active_file_low_max_scan;
+#endif
+
 extern int sysctl_overcommit_memory;
 extern int sysctl_overcommit_ratio;
 extern unsigned long sysctl_overcommit_kbytes;
diff -pru a/kernel/sysctl.c b/kernel/sysctl.c
--- a/kernel/sysctl.c	2020-12-21 21:30:08.000000000 +0900
+++ b/kernel/sysctl.c	2021-02-07 03:47:15.642156813 +0900
@@ -111,6 +111,24 @@
 static int sixty = 60;
 #endif
 
+#if defined(CONFIG_PROTECT_ACTIVE_FILE)
+#if CONFIG_PROTECT_ACTIVE_FILE_LOW_KBYTES < 0
+#error "CONFIG_PROTECT_ACTIVE_FILE_LOW_KBYTES should be >= 0"
+#endif
+#if CONFIG_PROTECT_ACTIVE_FILE_LOW_MAX_SCAN < 0
+#error "CONFIG_PROTECT_ACTIVE_FILE_LOW_MAX_SCAN should be >= 0"
+#endif
+#if CONFIG_PROTECT_ACTIVE_FILE_MIN_KBYTES < 0
+#error "CONFIG_PROTECT_ACTIVE_FILE_MIN_KBYTES should be >= 0"
+#endif
+unsigned long sysctl_active_file_low_kbytes __read_mostly =
+	CONFIG_PROTECT_ACTIVE_FILE_LOW_KBYTES;
+unsigned long sysctl_active_file_low_max_scan __read_mostly =
+	CONFIG_PROTECT_ACTIVE_FILE_LOW_MAX_SCAN;
+unsigned long sysctl_active_file_min_kbytes __read_mostly =
+	CONFIG_PROTECT_ACTIVE_FILE_MIN_KBYTES;
+#endif
+
 static int __maybe_unused neg_one = -1;
 static int __maybe_unused two = 2;
 static int __maybe_unused four = 4;
@@ -3082,6 +3100,29 @@ static struct ctl_table vm_table[] = {
 		.extra2		= SYSCTL_ONE,
 	},
 #endif
+#if defined(CONFIG_PROTECT_ACTIVE_FILE)
+	{
+		.procname	= "active_file_low_kbytes",
+		.data		= &sysctl_active_file_low_kbytes,
+		.maxlen		= sizeof(sysctl_active_file_low_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "active_file_low_max_scan",
+		.data		= &sysctl_active_file_low_max_scan,
+		.maxlen		= sizeof(sysctl_active_file_low_max_scan),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "active_file_min_kbytes",
+		.data		= &sysctl_active_file_min_kbytes,
+		.maxlen		= sizeof(sysctl_active_file_min_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+#endif
 	{
 		.procname	= "user_reserve_kbytes",
 		.data		= &sysctl_user_reserve_kbytes,
diff -pru a/mm/Kconfig b/mm/Kconfig
--- a/mm/Kconfig	2020-12-21 21:30:08.000000000 +0900
+++ b/mm/Kconfig	2021-02-07 03:28:21.459072326 +0900
@@ -63,6 +63,54 @@ config SPARSEMEM_MANUAL
 
 endchoice
 
+config PROTECT_ACTIVE_FILE
+	bool "Reserve some active file pages under memory pressure"
+	depends on SYSCTL
+	default y
+	help
+	  Active file pages should not be evicted under memory pressure if their
+	  volume is below selected value.
+
+	  Reservation of active file pages may be used to reduce thrashing under
+	  low-memory conditions.
+
+	  The amount of reserved active file pages may be set via
+	  CONFIG_PROTECT_ACTIVE_FILE_MIN_KBYTES, 
+	  CONFIG_PROTECT_ACTIVE_FILE_LOW_KBYTES and at runtime via the sysctl
+	  knobs vm.active_file_min_kbytes and vm.active_file_low_kbytes.
+
+config PROTECT_ACTIVE_FILE_LOW_KBYTES
+	int "Default value for vm.active_file_low_kbytes"
+	depends on PROTECT_ACTIVE_FILE
+	default "0"
+	help
+	  This is default value for vm.active_file_low_kbytes. This knob
+	  controls soft eviction throttling of active file pages eviction under
+	  memory pressure. Eviction of active file pages will be throttled if their
+	  volume  is below this value. The severity of the throttling depends on
+	  vm.active_file_low_max_scan.
+
+config PROTECT_ACTIVE_FILE_LOW_MAX_SCAN
+	int "Default value for vm.active_file_low_max_scan"
+	depends on PROTECT_ACTIVE_FILE
+	default "32"
+	help
+	  This knob controls the severity of the throttling of active file pages
+	  eviction when soft active file pages reservation is implied (when the
+	  volume of active file pages is below vm.active_file_low_kbytes).
+	  The lower the value, the stronger the trottling. Setting the value to
+	  zero turns a soft reservation of active file pages into a hard
+	  reservation.
+
+config PROTECT_ACTIVE_FILE_MIN_KBYTES
+	int "Default value for vm.active_file_min_kbytes"
+	depends on PROTECT_ACTIVE_FILE
+	default "0"
+	help
+	  Active file pages should not be evicted under memory pressure if their
+	  volume is below this (even with no free swap space). This is default
+	  value for vm.active_file_min_kbytes.
+
 config DISCONTIGMEM
 	def_bool y
 	depends on (!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE) || DISCONTIGMEM_MANUAL
diff -pru a/mm/vmscan.c b/mm/vmscan.c
--- a/mm/vmscan.c	2020-12-21 21:30:08.000000000 +0900
+++ b/mm/vmscan.c	2021-02-07 03:17:24.928544639 +0900
@@ -186,6 +186,10 @@ static void set_task_reclaim_state(struc
 static LIST_HEAD(shrinker_list);
 static DECLARE_RWSEM(shrinker_rwsem);
 
+#if defined(CONFIG_PROTECT_ACTIVE_FILE)
+#define K(x) ((x) << (PAGE_SHIFT-10))
+#endif
+
 #ifdef CONFIG_MEMCG
 /*
  * We allow subsystems to populate their shrinker-related
@@ -2418,6 +2422,20 @@ out:
 			BUG();
 		}
 
+#if defined(CONFIG_PROTECT_ACTIVE_FILE)
+		if (lru == LRU_ACTIVE_FILE) {
+			unsigned long active_file_kbytes =
+				K(global_node_page_state(NR_ACTIVE_FILE));
+			unsigned long active_file_low_max_scan =
+				sysctl_active_file_low_max_scan >> sc->priority;
+			if (active_file_kbytes <= sysctl_active_file_min_kbytes)
+				scan = 0;
+			else if (active_file_kbytes <= sysctl_active_file_low_kbytes &&
+				scan > active_file_low_max_scan) 
+				scan = active_file_low_max_scan;
+		}
+#endif
+
 		nr[lru] = scan;
 	}
 }
