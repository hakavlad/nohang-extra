diff -pru a/Documentation/admin-guide/sysctl/vm.rst b/Documentation/admin-guide/sysctl/vm.rst
--- a/Documentation/admin-guide/sysctl/vm.rst	2021-01-06 22:56:56.000000000 +0900
+++ b/Documentation/admin-guide/sysctl/vm.rst	2021-03-20 06:15:56.681985204 +0900
@@ -26,6 +26,8 @@ Currently, these files are in /proc/sys/
 
 - admin_reserve_kbytes
 - block_dump
+- clean_file_low_kbytes
+- clean_file_min_kbytes
 - compact_memory
 - compaction_proactiveness
 - compact_unevictable_allowed
@@ -113,6 +115,35 @@ block_dump enables block I/O debugging w
 information on block I/O debugging is in Documentation/admin-guide/laptops/laptop-mode.rst.
 
 
+clean_file_low_kbytes
+=====================
+
+Available only when CONFIG_PROTECT_CLEAN_FILE is set. This knob provides
+*best-effort* protection of clean file pages. The clean file pages on the current
+node won't be reclaimed uder memory pressure when their volume is below
+vm.clean_file_low_kbytes *unless* we threaten to OOM or have no swap space
+or vm.swappiness=0.
+
+Protection of clean file pages may be used to prevent thrashing and
+reducing I/O under low-memory conditions.
+
+The default value is 0.
+
+
+clean_file_min_kbytes
+=====================
+
+Available only when CONFIG_PROTECT_CLEAN_FILE is set. This knob provides
+*hard* protection of clean file pages. The clean file pages on the current node
+won't be reclaimed under memory pressure when their volume is below
+vm.clean_file_min_kbytes.
+
+Hard protection of clean file pages may be used to avoid high latency and
+prevent livelock in near-OOM conditions.
+
+The default value is 0.
+
+
 compact_memory
 ==============
 
diff -pru a/include/linux/mm.h b/include/linux/mm.h
--- a/include/linux/mm.h	2021-01-06 22:56:56.000000000 +0900
+++ b/include/linux/mm.h	2021-03-20 06:11:10.962653938 +0900
@@ -205,6 +205,11 @@ extern int sysctl_max_map_count;
 extern unsigned long sysctl_user_reserve_kbytes;
 extern unsigned long sysctl_admin_reserve_kbytes;
 
+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+extern unsigned long sysctl_clean_file_low_kbytes;
+extern unsigned long sysctl_clean_file_min_kbytes;
+#endif
+
 extern int sysctl_overcommit_memory;
 extern int sysctl_overcommit_ratio;
 extern unsigned long sysctl_overcommit_kbytes;
diff -pru a/kernel/sysctl.c b/kernel/sysctl.c
--- a/kernel/sysctl.c	2021-01-06 22:56:56.000000000 +0900
+++ b/kernel/sysctl.c	2021-03-20 06:10:43.721900521 +0900
@@ -111,6 +111,19 @@
 static int sixty = 60;
 #endif
 
+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+#if CONFIG_PROTECT_CLEAN_FILE_LOW_KBYTES < 0
+#error "CONFIG_PROTECT_CLEAN_FILE_LOW_KBYTES should be >= 0"
+#endif
+#if CONFIG_PROTECT_CLEAN_FILE_MIN_KBYTES < 0
+#error "CONFIG_PROTECT_CLEAN_FILE_MIN_KBYTES should be >= 0"
+#endif
+unsigned long sysctl_clean_file_low_kbytes __read_mostly =
+	CONFIG_PROTECT_CLEAN_FILE_LOW_KBYTES;
+unsigned long sysctl_clean_file_min_kbytes __read_mostly =
+	CONFIG_PROTECT_CLEAN_FILE_MIN_KBYTES;
+#endif
+
 static int __maybe_unused neg_one = -1;
 static int __maybe_unused two = 2;
 static int __maybe_unused four = 4;
@@ -3082,6 +3095,22 @@ static struct ctl_table vm_table[] = {
 		.extra2		= SYSCTL_ONE,
 	},
 #endif
+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+	{
+		.procname	= "clean_file_low_kbytes",
+		.data		= &sysctl_clean_file_low_kbytes,
+		.maxlen		= sizeof(sysctl_clean_file_low_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "clean_file_min_kbytes",
+		.data		= &sysctl_clean_file_min_kbytes,
+		.maxlen		= sizeof(sysctl_clean_file_min_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+#endif
 	{
 		.procname	= "user_reserve_kbytes",
 		.data		= &sysctl_user_reserve_kbytes,
diff -pru a/mm/Kconfig b/mm/Kconfig
--- a/mm/Kconfig	2021-01-06 22:56:56.000000000 +0900
+++ b/mm/Kconfig	2021-03-20 06:07:56.136981981 +0900
@@ -63,6 +63,40 @@ config SPARSEMEM_MANUAL
 
 endchoice
 
+config PROTECT_CLEAN_FILE
+	bool "Add sysctl knobs for protecting clean file pages under low memory"
+	depends on SYSCTL
+	default y
+	help
+	  Protection of clean file pages may be used to prevent thrashing
+	  and reduce I/O under memory pressure. Hard protection of clean file
+	  pages may be used to avoid high latency and prevent livelock in
+	  near-OOM conditions.
+	  
+	  This option provides two sysctl knobs for protecting clean file pages
+	  under memory pressure.
+
+config PROTECT_CLEAN_FILE_LOW_KBYTES
+	int "Default value for vm.clean_file_low_kbytes"
+	depends on PROTECT_CLEAN_FILE
+	default "0"
+	help
+	  The vm.clean_file_low_kbytes sysctl knob provides *best-effort*
+	  protection of clean file pages. The clean file pages on the current
+	  node won't be reclaimed uder memory pressure when their volume is
+	  below vm.clean_file_low_kbytes *unless* we threaten to OOM or have
+	  no swap space or vm.swappiness=0.
+
+config PROTECT_CLEAN_FILE_MIN_KBYTES
+	int "Default value for vm.clean_file_min_kbytes"
+	depends on PROTECT_CLEAN_FILE
+	default "0"
+	help
+	  The vm.clean_file_min_kbytes sysctl knob provides *hard* protection
+	  of clean file pages. The clean file pages on the current node won't be
+	  reclaimed under memory pressure when their volume is below
+	  vm.clean_file_min_kbytes.
+
 config DISCONTIGMEM
 	def_bool y
 	depends on (!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE) || DISCONTIGMEM_MANUAL
diff -pru a/mm/vmscan.c b/mm/vmscan.c
--- a/mm/vmscan.c	2021-01-06 22:56:56.000000000 +0900
+++ b/mm/vmscan.c	2021-03-20 05:58:55.837243508 +0900
@@ -120,6 +120,21 @@ struct scan_control {
 	/* The file pages on the current node are dangerously low */
 	unsigned int file_is_tiny:1;
 
+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+	/*
+	 * The clean file pages on the current node won't be reclaimed when
+	 * their volume is below vm.clean_file_low_kbytes *unless* we threaten
+	 * to OOM or have no swap space or vm.swappiness=0.
+	 */
+	unsigned int clean_file_is_low:1;
+
+	/*
+	 * The clean file pages on the current node won't be reclaimed when
+	 * their volume is below vm.clean_file_min_kbytes.
+	 */
+	unsigned int clean_file_is_min:1;
+#endif
+
 	/* Allocation order */
 	s8 order;
 
@@ -2278,6 +2293,18 @@ static void get_scan_count(struct lruvec
 		goto out;
 	}
 
+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+	/*
+	 * Force-scan anon if clean file pages is under vm.clean_file_min_kbytes
+	 * or vm.clean_file_low_kbytes (unless the swappiness setting
+	 * disagrees with swapping).
+	 */
+	if ((sc->clean_file_is_low || sc->clean_file_is_min) && swappiness) {
+		scan_balance = SCAN_ANON;
+		goto out;
+	}
+#endif
+
 	/*
 	 * If there is enough inactive page cache, we do not reclaim
 	 * anything from the anonymous working right now.
@@ -2414,6 +2441,15 @@ out:
 			BUG();
 		}
 
+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+		/*
+		 * Don't reclaim clean file pages when their volume is below
+		 * vm.clean_file_min_kbytes.
+		 */
+		if (file && sc->clean_file_is_min)
+			scan = 0;
+#endif
+
 		nr[lru] = scan;
 	}
 }
@@ -2738,7 +2774,9 @@ again:
 		unsigned long total_high_wmark = 0;
 		unsigned long free, anon;
 		int z;
-
+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+		unsigned long dirty, clean;
+#endif
 		free = sum_zone_node_page_state(pgdat->node_id, NR_FREE_PAGES);
 		file = node_page_state(pgdat, NR_ACTIVE_FILE) +
 			   node_page_state(pgdat, NR_INACTIVE_FILE);
@@ -2762,6 +2800,16 @@ again:
 			file + free <= total_high_wmark &&
 			!(sc->may_deactivate & DEACTIVATE_ANON) &&
 			anon >> sc->priority;
+
+#if defined(CONFIG_PROTECT_CLEAN_FILE)
+		dirty = node_page_state(pgdat, NR_FILE_DIRTY);
+
+		if (file > dirty)
+			clean = (file - dirty) << (PAGE_SHIFT - 10);
+
+		sc->clean_file_is_low = clean <= sysctl_clean_file_low_kbytes;
+		sc->clean_file_is_min = clean <= sysctl_clean_file_min_kbytes;
+#endif
 	}
 
 	shrink_node_memcgs(pgdat, sc);

