#!/usr/bin/env python3


import os
import ctypes
from time import sleep
from sys import exit
from signal import signal, SIGKILL, SIGTERM, SIGINT, SIGQUIT, SIGHUP






def meminfo():

    # получаем сырой mem_list
    with open('/proc/meminfo') as file:
        mem_list = file.readlines()

    # получаем список названий позиций: MemTotal etc
    mem_list_names = []
    for s in mem_list:
        mem_list_names.append(s.split(':')[0])

    # ищем MemAvailable, обрабатываем исключение
    try:
        mem_available_index = mem_list_names.index('MemAvailable')
    except ValueError:
        print("Your Linux kernel is too old (3.14+ requied), bye!")
        # исключение для ядер < 3.14, не определяющих MemAvailable
        exit()

    # ищем позиции SwapTotl и SwapFree
    swap_total_index = mem_list_names.index('SwapTotal')
    swap_free_index = mem_list_names.index('SwapFree')

    buffers_index = mem_list_names.index('Buffers')
    cached_index = mem_list_names.index('Cached')
    active_index = mem_list_names.index('Active')
    inactive_index = mem_list_names.index('Inactive')
    shmem_index = mem_list_names.index('Shmem')

    # ищем значение MemTotal в KiB
    mem_total = int(mem_list[0].split(':')[1].split(' ')[-2])

    return (
        mem_total, mem_available_index, swap_total_index, swap_free_index,
        buffers_index, cached_index, active_index, inactive_index, shmem_index)


meminfo_tuple = meminfo()

mem_total = meminfo_tuple[0]
mem_available_index = meminfo_tuple[1]
swap_total_index = meminfo_tuple[2]
swap_free_index = meminfo_tuple[3]

buffers_index = meminfo_tuple[4]
cached_index = meminfo_tuple[5]
active_index = meminfo_tuple[6]
inactive_index = meminfo_tuple[7]
shmem_index = meminfo_tuple[8]







# жор числп гиг
def lim():

    expanding_list = []

    n = input('На сколько гигабайт уменьшить  доступную память?\n: ')

    print('Погнали тратить ' + n + ' гиг...')

    i = 0

    while True:

        i += 1

        try:
            expanding_list.append(os.urandom(int(100)))
            expanding_list.append('#' * int(300))
        except MemoryError:
            print('MemoryError!')
            break
        if i > 2020202 * int(n):
            print('DONE')
            break

    return expanding_list
















sig_list = [SIGTERM, SIGINT, SIGQUIT, SIGHUP]

sig_dict = {
    SIGKILL: 'SIGKILL',
    SIGINT: 'SIGINT',
    SIGQUIT: 'SIGQUIT',
    SIGHUP: 'SIGHUP',
    SIGTERM: 'SIGTERM'
}





def signal_handler(signum, frame):
    """
    """

    print('Signal handler called with the {} signal '.format(sig_dict[signum]))

    while True:
        try:
            menu()
        except RuntimeError:
            return None

    exit()






# handle signals
for i in sig_list:
    signal(i, signal_handler)














def print_mem():
    """
    """
    pass


def disk_sleep():
    """
    """
    lib = ctypes.CDLL('libc.so.6')
    vfork = lib.vfork
    vfork()
    sleep(10)







def menu():
    """
    """

    print('Выберите вариант из списка ниже. Ctrl C to enter в меню')
    print('0 - очистить накопления при их наличии')
    print('1 запустить бесконечное потребление, предложив выбрать скорость потребления и энтропию')
    print('2 запустить ограниченное потребление заданного числа гигов')
    print('3 жрать память пока количество доступной памяти не опустится ниже заданного')
    print('4 перевести процесс в состояние disk sleep')
    print('9 выход')


    li = input(': ')

    if li == '0':
        ex_list = []
        x = 0
        y = 0
    elif li == '1':
        inf()
    elif li == '2':
        x = lim()
        ex_list.append(x)
    elif li == '3':
        y = lim2avail()
        ex_list.append(y)
    elif li == '4':
        disk_sleep()
    elif li == '9':
        exit()
    else:
        return None




while True:
    menu()










































