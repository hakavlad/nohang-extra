#!/usr/bin/env python3
"""prelockd"""

import os
import mmap
from re import search
from sre_constants import error as invalid_re
from time import sleep, monotonic, process_time
from sys import stdout, stderr, exit, argv
from signal import signal, SIGTERM, SIGINT, SIGQUIT, SIGHUP
from ctypes import CDLL


###############################################################################


def valid_re(reg_exp):
    """Validate regular expression.
    """
    try:
        search(reg_exp, '')
    except invalid_re:
        errprint('Invalid config: invalid regexp: {}'.format(reg_exp))
        exit(1)


def errprint(*text):
    """
    """
    print(*text, file=stderr, flush=True)


def string_to_float_convert_test(string):
    """Try to interprete string values as floats."""
    try:
        return float(string)
    except ValueError:
        return None


def mlockall():
    """
    lock process memory
    """
    MCL_CURRENT = 1
    MCL_FUTURE = 2
    MCL_ONFAULT = 4

    libc = CDLL('libc.so.6', use_errno=True)
    result = libc.mlockall(
        MCL_CURRENT | MCL_FUTURE | MCL_ONFAULT
    )

    if result != 0:
        result = libc.mlockall(
            MCL_CURRENT | MCL_FUTURE
        )
        if result != 0:
            errprint(
                'ERROR: cannot lock all memory: [Errno {}]'.format(result))
            errprint('Exit.')
            exit(1)
        else:
            print('process memory locked with MCL_CURRENT | MCL_FUTURE')
    else:
        print('process memory locked with MCL_CURRENT | MCL_FUTURE | MCL_'
              'ONFAULT')


def signal_handler(signum, frame):
    """
    handle signals: close fd and exit
    """
    if len(lock_dict) > 0:
        for i in lock_dict:
            lock_dict[i][1].close()
            lock_dict[i][0].close()
    print('Got signal {}, exit.'.format(signum))
    exit()


def get_mapped_set():
    """
    """
    _map_set = set()

    for pid in os.listdir('/proc'):
        if pid[0].isdecimal() is False:
            continue
        map_dir = '/proc/{}/map_files'.format(pid)
        try:
            try:
                f_list = os.listdir(map_dir)
            except PermissionError as e:
                errprint(e)
                exit(1)

            for f_name in f_list:
                f_realpath = os.path.realpath('{}/{}'.format(map_dir, f_name))

                if f_realpath.endswith(' (deleted)'):
                    # print('deleted:', f_realpath)
                    continue

                _map_set.add(f_realpath)
        except FileNotFoundError as e:
            errprint(e)
            continue

    return _map_set


def is_mem_available_ok():
    """
    """
    while True:
        a = check_mem_available()
        if a < min_mem_available:
            # print('Sleep 3s')
            sleep(3)
            continue
        else:
            break


def lock_files(_map_set):
    """
    """
    lock_counter = 0
    size_counter = 0

    di = dict()
    for rp in _map_set:
        rp = str(rp)
        if search(r, rp) is not None:
            try:
                s = os.path.getsize(rp)
                if s > 0:
                    di[rp] = s
            except FileNotFoundError as e:
                if debug:
                    print(e)
    list_d = list(di.items())
    list_d.sort(key=lambda i: i[1])

    cont = True

    for f_realpath, _ in list_d:

        try:
            size = os.path.getsize(f_realpath)
        except FileNotFoundError as e:
            errprint(e)
            continue

        if cont is False:
            if debug is True:
                print('skip (self RSS > $MAX_SELF_RSS_PERCENT):', round(
                    size / 1048576, 1), 'MiB', f_realpath)
            continue

        if size > MAX_SIZE:
            if debug is True:
                print('skip (file size > $MAX_FILE_SIZE_MIB):', round(
                    size / 1048576, 1), 'MiB,', f_realpath)
            continue

        try:
            f = open(f_realpath, 'rb')
            mm = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
        except OSError as e:
            errprint(e)
            break

        t = 0

        while True:

            is_mem_available_ok()

            rss = get_self_rss()

            if rss > max_self_rss:
                cont = False
                x = t / size * 100
                if debug is True:
                    print('locked: {} MiB ({}%) {}'.format(round(
                        t / 1048576, 1), round(x, 1), f_realpath))
                print('Self RSS: {} MiB'.format(round(rss / 1024 / 1024, 1)))
                break

            mm.read(CHUNK)
            t = mm.tell()
            if t == size:
                if debug is True:
                    print('locked:', round(t / 1048576, 1), 'MiB', f_realpath)
                lock_dict[f_realpath] = (f, mm)
                lock_counter += 1
                size_counter += size
                break

    print('locked {} files, {} MiB'.format(lock_counter, round(
        size_counter / 1048576, 1)))


def print_snapshot():
    """
    """
    map_set = get_mapped_set()
    map_list = sorted(list(map_set))
    for f_realpath in map_list:
        print(f_realpath)


def write_snapshot():
    """
    """
    map_set = get_mapped_set()
    map_list = sorted(list(map_set))
    d = '/var/lib/prelockd'
    path = '/var/lib/prelockd/saved_snapshot'
    try:
        with open(path, 'w') as f:
            for line in map_list:
                f.write(line + '\n')
    except FileNotFoundError:
        os.mkdir(d)
        os.chmod(d, mode=0o700)
        with open(path, 'w') as f:
            for line in map_list:
                f.write(line + '\n')
    print('OK, mmapped files list has been saved in ' + path)


def lock_saved_snapshot():
    """
    """
    path = '/var/lib/prelockd/saved_snapshot'
    f_list = []
    try:
        with open(path) as f:
            for line in f:
                f_list.append(line[:-1])
    except FileNotFoundError as e:
        errprint(e)

    print('LOCKING SAVED SNAPSHOT')

    lock_files(f_list)

    print('LOCKED!')


def check_mem_available():
    """
    """
    with open('/proc/meminfo') as f:
        for n, line in enumerate(f):
            if n == mem_available_index:
                mem_available = int(line.split(':')[1][:-4])
    return mem_available


def get_self_rss():
    """
    """
    with open('/proc/self/statm') as f:
        return int(f.readline().split(' ')[1]) * SC_PAGESIZE


###############################################################################


a = argv[1:]
la = len(a)
if la == 0:
    errprint('invalid input: missing CLI options')
    exit(1)
elif la == 1:
    if a[0] == '-p':
        print_snapshot()
        exit()
    elif a[0] == '-w':
        write_snapshot()
        exit()
    else:
        errprint('invalid input')
        exit(1)
elif la == 2:
    if a[0] == '-c':
        config = a[1]
    else:
        errprint('invalid input')
        exit(1)
else:
    errprint('invalid input: too many options')
    exit(1)


with open('/proc/meminfo') as f:
    mem_list = f.readlines()
    mem_total = int(mem_list[0].split(':')[1][:-4])

mem_list_names = []

for s in mem_list:
    mem_list_names.append(s.split(':')[0])
try:
    mem_available_index = mem_list_names.index('MemAvailable')
except ValueError:
    errprint('Your Linux kernel is too old, Linux 3.14+ required\nExit')

SC_PAGESIZE = os.sysconf(os.sysconf_names['SC_PAGESIZE'])


config_dict = dict()
try:
    with open(config) as f:
        for line in f:
            if line[0] == '$' and '=' in line:
                key, _, value = line.partition('=')
                key = key.rstrip()
                value = value.strip()
                if key in config_dict:
                    errprint('config key {} duplication'.format(key))
                    exit(1)
                config_dict[key] = value
except (PermissionError, UnicodeDecodeError, IsADirectoryError,
        IndexError, FileNotFoundError) as e:
    errprint('Invalid config: {}. Exit.'.format(e))
    exit(1)


if '$DEBUG' in config_dict:
    debug = config_dict['$DEBUG']
    if debug == 'True':
        debug = True
    elif debug == 'False':
        debug = False
    else:
        errprint('invalid $DEBUG value')
        exit(1)
else:
    errprint('missing $DEBUG key')
    exit(1)


if '$MAX_FILE_SIZE_MIB' in config_dict:
    string = config_dict['$MAX_FILE_SIZE_MIB']
    max_file_size_mib = string_to_float_convert_test(string)
    if max_file_size_mib is None:
        errprint('invalid $MAX_FILE_SIZE_MIB value')
        exit(1)
    max_file_size = int(max_file_size_mib * 1048576)
else:
    errprint('missing $MAX_FILE_SIZE_MIB key')
    exit(1)


if '$MIN_MEM_AVAILABLE_MIB' in config_dict:
    string = config_dict['$MIN_MEM_AVAILABLE_MIB']
    min_mem_available_mib = string_to_float_convert_test(string)
    if min_mem_available_mib is None:
        errprint('invalid $MIN_MEM_AVAILABLE_MIB value')
        exit(1)
    min_mem_available = int(min_mem_available_mib * 1024)
else:
    errprint('missing $MIN_MEM_AVAILABLE_MIB key')
    exit(1)


if '$LOCK_RE' in config_dict:
    lock_re = config_dict['$LOCK_RE']
    valid_re(lock_re)
else:
    errprint('missing $LOCK_RE key')
    exit(1)


if '$MAX_SELF_RSS_PERCENT' in config_dict:
    string = config_dict['$MAX_SELF_RSS_PERCENT']
    max_self_rss_percent = string_to_float_convert_test(string)
    if max_self_rss_percent is None:
        errprint('invalid $MAX_SELF_RSS_PERCENT value')
        exit(1)
    max_self_rss = int(mem_total * max_self_rss_percent / 100) * 1024
else:
    errprint('missing $MAX_FILE_SIZE_MIB key')
    exit(1)


print([debug, lock_re, max_file_size])


config = os.path.abspath(config)

print('Starting prelockd with the config: {}'.format(config))


r = lock_re

# read files by 1 MiB
CHUNK = int(1024**2 / 4)  # установи кратность SC_PAGESIZE

# max file size that can be locked
MAX_SIZE = max_file_size


###############################################################################

p0 = process_time()

m0 = monotonic()


stdout.flush()

mlockall()

sig_list = [SIGTERM, SIGINT, SIGQUIT, SIGHUP]

lock_dict = dict()

for i in sig_list:
    signal(i, signal_handler)


# lock_saved_snapshot()

# block_small_first = True


map_set = get_mapped_set()

print('found {} mapped files'.format(len(map_set)))

stdout.flush()

lock_files(map_set)

try:
    num_fd = len(os.listdir('/proc/self/fd'))
    print('fd opened:', num_fd)
except OSError as e:
    errprint(e)

m = monotonic() - m0
p = process_time() - p0


x = get_self_rss()
print('Self RSS:', round(x / 1048576, 1), 'MiB')


print('startup time: {}s'.format(round(m, 3)))
print('process time: {}s'.format(round(p, 3)))


# locked 510 files, 20.6 MiB; fd opened: 1024; self RSS: 34.5 MiB
# startup time: 1.843s; process time: 1.842s


stdout.flush()

while True:
    sleep(99999)
