#!/usr/bin/env python3

from time import sleep, monotonic, process_time, time
from ctypes import CDLL
from sys import stdout, stderr, argv, exit


def mlockall():
    """
    """
    MCL_CURRENT = 1
    MCL_FUTURE = 2
    MCL_ONFAULT = 4
    libc = CDLL('libc.so.6', use_errno=True)
    libc.mlockall(MCL_CURRENT | MCL_FUTURE | MCL_ONFAULT)

def write(path, string):
    """
    """
    with open(path, 'w') as f:
        f.write(string)

mlockall()

kmsg_path = '/dev/kmsg'

p0 = process_time()

m0 = monotonic()

test_string = 'foo: clock calibration: {}\n'.format(m0)

try:
    write(kmsg_path, test_string)
except Exception as e:
    print(e)
    exit(1)

m1 = monotonic()

KMSG_OK = False





try:
    with open(kmsg_path) as f:
        while True:
            s = f.readline()
            if KMSG_OK:
                print(s[:-1])
            else:
                if test_string in s:
                    print(s[:-1])
                    s0 = float(s.split(',')[2]) / 1000000
                    delta = s0 - m0
                    print('delta:', delta)
                    print('kmsg monitoring has started!')
                    KMSG_OK = True
except KeyboardInterrupt:
    print()
    p10 = process_time()
    m10 = monotonic()
    m = m10 - m0
    p = p10 - p0
    x = p / m * 100
    print('p, s:', p)
    print('%', x)
    print('Exit.')
    exit()









