diff -pru a/kernel/sysctl.c b/kernel/sysctl.c
--- a/kernel/sysctl.c	2020-12-27 00:02:46.000000000 +0900
+++ b/kernel/sysctl.c	2021-02-03 02:48:14.874833456 +0900
@@ -111,6 +111,40 @@
 static int sixty = 60;
 #endif
 
+
+#if defined(CONFIG_RESERVE_LRU)
+
+unsigned long sysctl_active_file_reserve_hard_kbytes __read_mostly =
+	CONFIG_ACTIVE_FILE_RESERVE_HARD_KBYTES;
+unsigned long sysctl_active_file_reserve_soft_kbytes __read_mostly =
+	CONFIG_ACTIVE_FILE_RESERVE_SOFT_KBYTES;
+unsigned long sysctl_active_file_reserve_soft_max_scan __read_mostly =
+	CONFIG_ACTIVE_FILE_RESERVE_SOFT_MAX_SCAN;
+
+unsigned long sysctl_inactive_file_reserve_hard_kbytes __read_mostly =
+	CONFIG_INACTIVE_FILE_RESERVE_HARD_KBYTES;
+unsigned long sysctl_inactive_file_reserve_soft_kbytes __read_mostly =
+	CONFIG_INACTIVE_FILE_RESERVE_SOFT_KBYTES;
+unsigned long sysctl_inactive_file_reserve_soft_max_scan __read_mostly =
+	CONFIG_INACTIVE_FILE_RESERVE_SOFT_MAX_SCAN;
+
+unsigned long sysctl_active_anon_reserve_hard_kbytes __read_mostly =
+	CONFIG_ACTIVE_ANON_RESERVE_HARD_KBYTES;
+unsigned long sysctl_active_anon_reserve_soft_kbytes __read_mostly =
+	CONFIG_ACTIVE_ANON_RESERVE_SOFT_KBYTES;
+unsigned long sysctl_active_anon_reserve_soft_max_scan __read_mostly =
+	CONFIG_ACTIVE_ANON_RESERVE_SOFT_MAX_SCAN;
+
+unsigned long sysctl_inactive_anon_reserve_hard_kbytes __read_mostly =
+	CONFIG_INACTIVE_ANON_RESERVE_HARD_KBYTES;
+unsigned long sysctl_inactive_anon_reserve_soft_kbytes __read_mostly =
+	CONFIG_INACTIVE_ANON_RESERVE_SOFT_KBYTES;
+unsigned long sysctl_inactive_anon_reserve_soft_max_scan __read_mostly =
+	CONFIG_INACTIVE_ANON_RESERVE_SOFT_MAX_SCAN;
+
+#endif
+
+
 static int __maybe_unused neg_one = -1;
 static int __maybe_unused two = 2;
 static int __maybe_unused four = 4;
@@ -3082,6 +3116,92 @@ static struct ctl_table vm_table[] = {
 		.extra2		= SYSCTL_ONE,
 	},
 #endif
+#if defined(CONFIG_RESERVE_LRU)
+	{
+		.procname	= "active_file_reserve_hard_kbytes",
+		.data		= &sysctl_active_file_reserve_hard_kbytes,
+		.maxlen		= sizeof(sysctl_active_file_reserve_hard_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "active_file_reserve_soft_kbytes",
+		.data		= &sysctl_active_file_reserve_soft_kbytes,
+		.maxlen		= sizeof(sysctl_active_file_reserve_soft_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "active_file_reserve_soft_max_scan",
+		.data		= &sysctl_active_file_reserve_soft_max_scan,
+		.maxlen		= sizeof(sysctl_active_file_reserve_soft_max_scan),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "inactive_file_reserve_hard_kbytes",
+		.data		= &sysctl_inactive_file_reserve_hard_kbytes,
+		.maxlen		= sizeof(sysctl_inactive_file_reserve_hard_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "inactive_file_reserve_soft_kbytes",
+		.data		= &sysctl_inactive_file_reserve_soft_kbytes,
+		.maxlen		= sizeof(sysctl_inactive_file_reserve_soft_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "inactive_file_reserve_soft_max_scan",
+		.data		= &sysctl_inactive_file_reserve_soft_max_scan,
+		.maxlen		= sizeof(sysctl_inactive_file_reserve_soft_max_scan),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "active_anon_reserve_hard_kbytes",
+		.data		= &sysctl_active_anon_reserve_hard_kbytes,
+		.maxlen		= sizeof(sysctl_active_anon_reserve_hard_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "active_anon_reserve_soft_kbytes",
+		.data		= &sysctl_active_anon_reserve_soft_kbytes,
+		.maxlen		= sizeof(sysctl_active_anon_reserve_soft_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "active_anon_reserve_soft_max_scan",
+		.data		= &sysctl_active_anon_reserve_soft_max_scan,
+		.maxlen		= sizeof(sysctl_active_anon_reserve_soft_max_scan),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "inactive_anon_reserve_hard_kbytes",
+		.data		= &sysctl_inactive_anon_reserve_hard_kbytes,
+		.maxlen		= sizeof(sysctl_inactive_anon_reserve_hard_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "inactive_anon_reserve_soft_kbytes",
+		.data		= &sysctl_inactive_anon_reserve_soft_kbytes,
+		.maxlen		= sizeof(sysctl_inactive_anon_reserve_soft_kbytes),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+	{
+		.procname	= "inactive_anon_reserve_soft_max_scan",
+		.data		= &sysctl_inactive_anon_reserve_soft_max_scan,
+		.maxlen		= sizeof(sysctl_inactive_anon_reserve_soft_max_scan),
+		.mode		= 0644,
+		.proc_handler	= proc_doulongvec_minmax,
+	},
+#endif
 	{
 		.procname	= "user_reserve_kbytes",
 		.data		= &sysctl_user_reserve_kbytes,
diff -pru a/mm/Kconfig b/mm/Kconfig
--- a/mm/Kconfig	2020-12-27 00:02:46.000000000 +0900
+++ b/mm/Kconfig	2021-02-03 02:38:20.885351658 +0900
@@ -63,6 +63,71 @@ config SPARSEMEM_MANUAL
 
 endchoice
 
+config RESERVE_LRU
+	bool "Reserve some active file pages under memory pressure"
+	depends on SYSCTL
+	default y
+
+config ACTIVE_FILE_RESERVE_HARD_KBYTES
+	int "Default value for vm.active_file_reserve_hard_kbytes"
+	depends on RESERVE_LRU
+	default "0"
+
+config ACTIVE_FILE_RESERVE_SOFT_KBYTES
+	int "Default value for vm.active_file_reserve_soft_kbytes"
+	depends on RESERVE_LRU
+	default "0"
+
+config ACTIVE_FILE_RESERVE_SOFT_MAX_SCAN
+	int "Default value for vm.active_file_reserve_soft_max_scan"
+	depends on RESERVE_LRU
+	default "32"
+
+config INACTIVE_FILE_RESERVE_HARD_KBYTES
+	int "Default value for vm.inactive_file_reserve_hard_kbytes"
+	depends on RESERVE_LRU
+	default "0"
+
+config INACTIVE_FILE_RESERVE_SOFT_KBYTES
+	int "Default value for vm.inactive_file_reserve_soft_kbytes"
+	depends on RESERVE_LRU
+	default "0"
+
+config INACTIVE_FILE_RESERVE_SOFT_MAX_SCAN
+	int "Default value for vm.inactive_file_reserve_soft_max_scan"
+	depends on RESERVE_LRU
+	default "32"
+
+config ACTIVE_ANON_RESERVE_HARD_KBYTES
+	int "Default value for vm.active_anon_reserve_hard_kbytes"
+	depends on RESERVE_LRU
+	default "0"
+
+config ACTIVE_ANON_RESERVE_SOFT_KBYTES
+	int "Default value for vm.active_anon_reserve_soft_kbytes"
+	depends on RESERVE_LRU
+	default "0"
+
+config ACTIVE_ANON_RESERVE_SOFT_MAX_SCAN
+	int "Default value for vm.active_anon_reserve_soft_max_scan"
+	depends on RESERVE_LRU
+	default "32"
+
+config INACTIVE_ANON_RESERVE_HARD_KBYTES
+	int "Default value for vm.inactive_anon_reserve_hard_kbytes"
+	depends on RESERVE_LRU
+	default "0"
+
+config INACTIVE_ANON_RESERVE_SOFT_KBYTES
+	int "Default value for vm.inactive_anon_reserve_soft_kbytes"
+	depends on RESERVE_LRU
+	default "0"
+
+config INACTIVE_ANON_RESERVE_SOFT_MAX_SCAN
+	int "Default value for vm.inactive_anon_reserve_soft_max_scan"
+	depends on RESERVE_LRU
+	default "32"
+
 config DISCONTIGMEM
 	def_bool y
 	depends on (!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE) || DISCONTIGMEM_MANUAL
diff -pru a/mm/vmscan.c b/mm/vmscan.c
--- a/mm/vmscan.c	2020-12-27 00:02:46.000000000 +0900
+++ b/mm/vmscan.c	2021-02-03 02:33:11.135289627 +0900
@@ -186,6 +186,30 @@ static void set_task_reclaim_state(struc
 static LIST_HEAD(shrinker_list);
 static DECLARE_RWSEM(shrinker_rwsem);
 
+
+#if defined(CONFIG_RESERVE_LRU)
+
+#define K(x) ((x) << (PAGE_SHIFT - 10))
+
+extern unsigned long sysctl_active_file_reserve_hard_kbytes;
+extern unsigned long sysctl_active_file_reserve_soft_kbytes;
+extern unsigned long sysctl_active_file_reserve_soft_max_scan;
+
+extern unsigned long sysctl_inactive_file_reserve_hard_kbytes;
+extern unsigned long sysctl_inactive_file_reserve_soft_kbytes;
+extern unsigned long sysctl_inactive_file_reserve_soft_max_scan;
+
+extern unsigned long sysctl_active_anon_reserve_hard_kbytes;
+extern unsigned long sysctl_active_anon_reserve_soft_kbytes;
+extern unsigned long sysctl_active_anon_reserve_soft_max_scan;
+
+extern unsigned long sysctl_inactive_anon_reserve_hard_kbytes;
+extern unsigned long sysctl_inactive_anon_reserve_soft_kbytes;
+extern unsigned long sysctl_inactive_anon_reserve_soft_max_scan;
+
+#endif
+
+
 #ifdef CONFIG_MEMCG
 /*
  * We allow subsystems to populate their shrinker-related
@@ -2418,6 +2442,70 @@ out:
 			BUG();
 		}
 
+#if defined(CONFIG_RESERVE_LRU)
+
+		if (lru == LRU_ACTIVE_FILE) {
+			unsigned long active_file_kbytes =
+				K(global_node_page_state(NR_ACTIVE_FILE));
+			unsigned long active_file_reserve_soft_max_scan =
+				sysctl_active_file_reserve_soft_max_scan >> sc->priority;
+
+			if (active_file_kbytes <= sysctl_active_file_reserve_hard_kbytes)
+				scan = 0;
+			else if (
+				active_file_kbytes <= sysctl_active_file_reserve_soft_kbytes &&
+				scan > active_file_reserve_soft_max_scan
+				) 
+				scan = active_file_reserve_soft_max_scan;
+		}
+
+		if (lru == LRU_INACTIVE_FILE) {
+			unsigned long inactive_file_kbytes =
+				K(global_node_page_state(NR_INACTIVE_FILE));
+			unsigned long inactive_file_reserve_soft_max_scan =
+				sysctl_inactive_file_reserve_soft_max_scan >> sc->priority;
+
+			if (inactive_file_kbytes <= sysctl_inactive_file_reserve_hard_kbytes)
+				scan = 0;
+			else if (
+				inactive_file_kbytes <= sysctl_inactive_file_reserve_soft_kbytes &&
+				scan > inactive_file_reserve_soft_max_scan
+				) 
+				scan = inactive_file_reserve_soft_max_scan;
+		}
+
+		if (lru == LRU_ACTIVE_ANON) {
+			unsigned long active_anon_kbytes =
+				K(global_node_page_state(NR_ACTIVE_ANON));
+			unsigned long active_anon_reserve_soft_max_scan =
+				sysctl_active_anon_reserve_soft_max_scan >> sc->priority;
+
+			if (active_anon_kbytes <= sysctl_active_anon_reserve_hard_kbytes)
+				scan = 0;
+			else if (
+				active_anon_kbytes <= sysctl_active_anon_reserve_soft_kbytes &&
+				scan > active_anon_reserve_soft_max_scan
+				) 
+				scan = active_anon_reserve_soft_max_scan;
+		}
+
+		if (lru == LRU_INACTIVE_ANON) {
+			unsigned long inactive_anon_kbytes =
+				K(global_node_page_state(NR_INACTIVE_ANON));
+			unsigned long inactive_anon_reserve_soft_max_scan =
+				sysctl_inactive_anon_reserve_soft_max_scan >> sc->priority;
+
+			if (inactive_anon_kbytes <= sysctl_inactive_anon_reserve_hard_kbytes)
+				scan = 0;
+			else if (
+				inactive_anon_kbytes <= sysctl_inactive_anon_reserve_soft_kbytes &&
+				scan > inactive_anon_reserve_soft_max_scan
+				) 
+				scan = inactive_anon_reserve_soft_max_scan;
+		}
+
+#endif
+
 		nr[lru] = scan;
 	}
 }
